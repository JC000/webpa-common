// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package wrp

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	"reflect"
	"runtime"
)

const (
	// ----- content types ----
	codecSelferC_UTF8306 = 1
	codecSelferC_RAW306  = 0
	// ----- value types used ----
	codecSelferValueTypeArray306 = 10
	codecSelferValueTypeMap306   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey306    = 2
	codecSelfer_containerMapValue306  = 3
	codecSelfer_containerMapEnd306    = 4
	codecSelfer_containerArrayElem306 = 6
	codecSelfer_containerArrayEnd306  = 7
)

var (
	codecSelferBitsize306                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr306 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer306 struct{}

func init() {
	if codec1978.GenVersion != 8 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			8, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
	}
}

func (x *Message) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [17]bool
			_ = yyq2
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false
			yyq2[1] = x.Source != ""
			yyq2[2] = x.Destination != ""
			yyq2[3] = x.TransactionUUID != ""
			yyq2[4] = x.ContentType != ""
			yyq2[5] = x.Accept != ""
			yyq2[6] = x.Status != nil
			yyq2[7] = x.RequestDeliveryResponse != nil
			yyq2[8] = len(x.Headers) != 0
			yyq2[9] = len(x.Metadata) != 0
			yyq2[10] = len(x.Spans) != 0
			yyq2[11] = x.IncludeSpans != nil
			yyq2[12] = x.Path != ""
			yyq2[13] = len(x.Payload) != 0
			yyq2[14] = x.ServiceName != ""
			yyq2[15] = x.URL != ""
			yyq2[16] = len(x.PartnerIDs) != 0
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(17)
			} else {
				var yynn2 = 1
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("msg_type"))
				r.WriteMapElemValue()
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Source))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[1] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("source"))
					r.WriteMapElemValue()
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Source))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Destination))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[2] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("dest"))
					r.WriteMapElemValue()
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Destination))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.TransactionUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("transaction_uuid"))
					r.WriteMapElemValue()
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.TransactionUUID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ContentType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("content_type"))
					r.WriteMapElemValue()
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ContentType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Accept))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("accept"))
					r.WriteMapElemValue()
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Accept))
					}
				}
			}
			var yyn21 bool
			if x.Status == nil {
				yyn21 = true
				goto LABEL21
			}
		LABEL21:
			if yyr2 || yy2arr2 {
				if yyn21 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[6] {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy22 := *x.Status
							yym23 := z.EncBinary()
							_ = yym23
							if false {
							} else {
								r.EncodeInt(int64(yy22))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("status"))
					r.WriteMapElemValue()
					if yyn21 {
						r.EncodeNil()
					} else {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy24 := *x.Status
							yym25 := z.EncBinary()
							_ = yym25
							if false {
							} else {
								r.EncodeInt(int64(yy24))
							}
						}
					}
				}
			}
			var yyn26 bool
			if x.RequestDeliveryResponse == nil {
				yyn26 = true
				goto LABEL26
			}
		LABEL26:
			if yyr2 || yy2arr2 {
				if yyn26 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[7] {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy27 := *x.RequestDeliveryResponse
							yym28 := z.EncBinary()
							_ = yym28
							if false {
							} else {
								r.EncodeInt(int64(yy27))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("rdr"))
					r.WriteMapElemValue()
					if yyn26 {
						r.EncodeNil()
					} else {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy29 := *x.RequestDeliveryResponse
							yym30 := z.EncBinary()
							_ = yym30
							if false {
							} else {
								r.EncodeInt(int64(yy29))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						yym32 := z.EncBinary()
						_ = yym32
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("headers"))
					r.WriteMapElemValue()
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						yym33 := z.EncBinary()
						_ = yym33
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[9] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym35 := z.EncBinary()
						_ = yym35
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("metadata"))
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[10] {
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("spans"))
					r.WriteMapElemValue()
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				}
			}
			var yyn40 bool
			if x.IncludeSpans == nil {
				yyn40 = true
				goto LABEL40
			}
		LABEL40:
			if yyr2 || yy2arr2 {
				if yyn40 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[11] {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy41 := *x.IncludeSpans
							yym42 := z.EncBinary()
							_ = yym42
							if false {
							} else {
								r.EncodeBool(bool(yy41))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("include_spans"))
					r.WriteMapElemValue()
					if yyn40 {
						r.EncodeNil()
					} else {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy43 := *x.IncludeSpans
							yym44 := z.EncBinary()
							_ = yym44
							if false {
							} else {
								r.EncodeBool(bool(yy43))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					yym46 := z.EncBinary()
					_ = yym46
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("path"))
					r.WriteMapElemValue()
					yym47 := z.EncBinary()
					_ = yym47
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Path))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[13] {
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						yym49 := z.EncBinary()
						_ = yym49
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW306, []byte(x.Payload))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("payload"))
					r.WriteMapElemValue()
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						yym50 := z.EncBinary()
						_ = yym50
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW306, []byte(x.Payload))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[14] {
					yym52 := z.EncBinary()
					_ = yym52
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ServiceName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[14] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("service_name"))
					r.WriteMapElemValue()
					yym53 := z.EncBinary()
					_ = yym53
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ServiceName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[15] {
					yym55 := z.EncBinary()
					_ = yym55
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.URL))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[15] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("url"))
					r.WriteMapElemValue()
					yym56 := z.EncBinary()
					_ = yym56
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.URL))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[16] {
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						yym58 := z.EncBinary()
						_ = yym58
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[16] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("partner_ids"))
					r.WriteMapElemValue()
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						yym59 := z.EncBinary()
						_ = yym59
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *Message) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap306 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray306 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr306)
		}
	}
}

func (x *Message) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				yyv4 := &x.Type
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				yyv6 := &x.Source
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "dest":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				yyv8 := &x.Destination
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "transaction_uuid":
			if r.TryDecodeAsNil() {
				x.TransactionUUID = ""
			} else {
				yyv10 := &x.TransactionUUID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "content_type":
			if r.TryDecodeAsNil() {
				x.ContentType = ""
			} else {
				yyv12 := &x.ContentType
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "accept":
			if r.TryDecodeAsNil() {
				x.Accept = ""
			} else {
				yyv14 := &x.Accept
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "status":
			if x.Status == nil {
				x.Status = new(int64)
			}
			if r.TryDecodeAsNil() {
				if x.Status != nil {
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*int64)(x.Status)) = int64(r.DecodeInt(64))
				}
			}
		case "rdr":
			if x.RequestDeliveryResponse == nil {
				x.RequestDeliveryResponse = new(int64)
			}
			if r.TryDecodeAsNil() {
				if x.RequestDeliveryResponse != nil {
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*int64)(x.RequestDeliveryResponse)) = int64(r.DecodeInt(64))
				}
			}
		case "headers":
			if r.TryDecodeAsNil() {
				x.Headers = nil
			} else {
				yyv20 := &x.Headers
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					z.F.DecSliceStringX(yyv20, d)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv22 := &x.Metadata
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					z.F.DecMapStringStringX(yyv22, d)
				}
			}
		case "spans":
			if r.TryDecodeAsNil() {
				x.Spans = nil
			} else {
				yyv24 := &x.Spans
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decSliceSlicestring((*[][]string)(yyv24), d)
				}
			}
		case "include_spans":
			if x.IncludeSpans == nil {
				x.IncludeSpans = new(bool)
			}
			if r.TryDecodeAsNil() {
				if x.IncludeSpans != nil {
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*bool)(x.IncludeSpans)) = r.DecodeBool()
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				yyv28 := &x.Path
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*((*string)(yyv28)) = r.DecodeString()
				}
			}
		case "payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv30 := &x.Payload
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					*yyv30 = r.DecodeBytes(*(*[]byte)(yyv30), false)
				}
			}
		case "service_name":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				yyv32 := &x.ServiceName
				yym33 := z.DecBinary()
				_ = yym33
				if false {
				} else {
					*((*string)(yyv32)) = r.DecodeString()
				}
			}
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				yyv34 := &x.URL
				yym35 := z.DecBinary()
				_ = yym35
				if false {
				} else {
					*((*string)(yyv34)) = r.DecodeString()
				}
			}
		case "partner_ids":
			if r.TryDecodeAsNil() {
				x.PartnerIDs = nil
			} else {
				yyv36 := &x.PartnerIDs
				yym37 := z.DecBinary()
				_ = yym37
				if false {
				} else {
					z.F.DecSliceStringX(yyv36, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *Message) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj38 int
	var yyb38 bool
	var yyhl38 bool = l >= 0
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		yyv39 := &x.Type
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv39) {
		} else {
			*((*int64)(yyv39)) = int64(r.DecodeInt(64))
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		yyv41 := &x.Source
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		yyv43 := &x.Destination
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionUUID = ""
	} else {
		yyv45 := &x.TransactionUUID
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*string)(yyv45)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContentType = ""
	} else {
		yyv47 := &x.ContentType
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*string)(yyv47)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Accept = ""
	} else {
		yyv49 := &x.Accept
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*string)(yyv49)) = r.DecodeString()
		}
	}
	if x.Status == nil {
		x.Status = new(int64)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.Status != nil {
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*int64)(x.Status)) = int64(r.DecodeInt(64))
		}
	}
	if x.RequestDeliveryResponse == nil {
		x.RequestDeliveryResponse = new(int64)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.RequestDeliveryResponse != nil {
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*int64)(x.RequestDeliveryResponse)) = int64(r.DecodeInt(64))
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headers = nil
	} else {
		yyv55 := &x.Headers
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			z.F.DecSliceStringX(yyv55, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv57 := &x.Metadata
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			z.F.DecMapStringStringX(yyv57, d)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spans = nil
	} else {
		yyv59 := &x.Spans
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			h.decSliceSlicestring((*[][]string)(yyv59), d)
		}
	}
	if x.IncludeSpans == nil {
		x.IncludeSpans = new(bool)
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.IncludeSpans != nil {
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}
		yym62 := z.DecBinary()
		_ = yym62
		if false {
		} else {
			*((*bool)(x.IncludeSpans)) = r.DecodeBool()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		yyv63 := &x.Path
		yym64 := z.DecBinary()
		_ = yym64
		if false {
		} else {
			*((*string)(yyv63)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv65 := &x.Payload
		yym66 := z.DecBinary()
		_ = yym66
		if false {
		} else {
			*yyv65 = r.DecodeBytes(*(*[]byte)(yyv65), false)
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		yyv67 := &x.ServiceName
		yym68 := z.DecBinary()
		_ = yym68
		if false {
		} else {
			*((*string)(yyv67)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		yyv69 := &x.URL
		yym70 := z.DecBinary()
		_ = yym70
		if false {
		} else {
			*((*string)(yyv69)) = r.DecodeString()
		}
	}
	yyj38++
	if yyhl38 {
		yyb38 = yyj38 > l
	} else {
		yyb38 = r.CheckBreak()
	}
	if yyb38 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PartnerIDs = nil
	} else {
		yyv71 := &x.PartnerIDs
		yym72 := z.DecBinary()
		_ = yym72
		if false {
		} else {
			z.F.DecSliceStringX(yyv71, d)
		}
	}
	for {
		yyj38++
		if yyhl38 {
			yyb38 = yyj38 > l
		} else {
			yyb38 = r.CheckBreak()
		}
		if yyb38 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj38-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SimpleRequestResponse) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_ = yyq2
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false
			yyq2[3] = x.ContentType != ""
			yyq2[4] = x.Accept != ""
			yyq2[5] = x.TransactionUUID != ""
			yyq2[6] = x.Status != nil
			yyq2[7] = x.RequestDeliveryResponse != nil
			yyq2[8] = len(x.Headers) != 0
			yyq2[9] = len(x.Metadata) != 0
			yyq2[10] = len(x.Spans) != 0
			yyq2[11] = x.IncludeSpans != nil
			yyq2[12] = len(x.Payload) != 0
			yyq2[13] = len(x.PartnerIDs) != 0
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(14)
			} else {
				var yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("msg_type"))
				r.WriteMapElemValue()
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Source))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("source"))
				r.WriteMapElemValue()
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Source))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Destination))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("dest"))
				r.WriteMapElemValue()
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Destination))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ContentType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("content_type"))
					r.WriteMapElemValue()
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ContentType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Accept))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("accept"))
					r.WriteMapElemValue()
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.Accept))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.TransactionUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("transaction_uuid"))
					r.WriteMapElemValue()
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.TransactionUUID))
					}
				}
			}
			var yyn21 bool
			if x.Status == nil {
				yyn21 = true
				goto LABEL21
			}
		LABEL21:
			if yyr2 || yy2arr2 {
				if yyn21 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[6] {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy22 := *x.Status
							yym23 := z.EncBinary()
							_ = yym23
							if false {
							} else {
								r.EncodeInt(int64(yy22))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("status"))
					r.WriteMapElemValue()
					if yyn21 {
						r.EncodeNil()
					} else {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy24 := *x.Status
							yym25 := z.EncBinary()
							_ = yym25
							if false {
							} else {
								r.EncodeInt(int64(yy24))
							}
						}
					}
				}
			}
			var yyn26 bool
			if x.RequestDeliveryResponse == nil {
				yyn26 = true
				goto LABEL26
			}
		LABEL26:
			if yyr2 || yy2arr2 {
				if yyn26 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[7] {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy27 := *x.RequestDeliveryResponse
							yym28 := z.EncBinary()
							_ = yym28
							if false {
							} else {
								r.EncodeInt(int64(yy27))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("rdr"))
					r.WriteMapElemValue()
					if yyn26 {
						r.EncodeNil()
					} else {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy29 := *x.RequestDeliveryResponse
							yym30 := z.EncBinary()
							_ = yym30
							if false {
							} else {
								r.EncodeInt(int64(yy29))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[8] {
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						yym32 := z.EncBinary()
						_ = yym32
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("headers"))
					r.WriteMapElemValue()
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						yym33 := z.EncBinary()
						_ = yym33
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[9] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym35 := z.EncBinary()
						_ = yym35
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("metadata"))
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[10] {
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("spans"))
					r.WriteMapElemValue()
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				}
			}
			var yyn40 bool
			if x.IncludeSpans == nil {
				yyn40 = true
				goto LABEL40
			}
		LABEL40:
			if yyr2 || yy2arr2 {
				if yyn40 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[11] {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy41 := *x.IncludeSpans
							yym42 := z.EncBinary()
							_ = yym42
							if false {
							} else {
								r.EncodeBool(bool(yy41))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[11] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("include_spans"))
					r.WriteMapElemValue()
					if yyn40 {
						r.EncodeNil()
					} else {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy43 := *x.IncludeSpans
							yym44 := z.EncBinary()
							_ = yym44
							if false {
							} else {
								r.EncodeBool(bool(yy43))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						yym46 := z.EncBinary()
						_ = yym46
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW306, []byte(x.Payload))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("payload"))
					r.WriteMapElemValue()
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW306, []byte(x.Payload))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[13] {
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						yym49 := z.EncBinary()
						_ = yym49
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("partner_ids"))
					r.WriteMapElemValue()
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						yym50 := z.EncBinary()
						_ = yym50
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SimpleRequestResponse) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap306 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray306 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr306)
		}
	}
}

func (x *SimpleRequestResponse) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				yyv4 := &x.Type
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				yyv6 := &x.Source
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "dest":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				yyv8 := &x.Destination
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "content_type":
			if r.TryDecodeAsNil() {
				x.ContentType = ""
			} else {
				yyv10 := &x.ContentType
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "accept":
			if r.TryDecodeAsNil() {
				x.Accept = ""
			} else {
				yyv12 := &x.Accept
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "transaction_uuid":
			if r.TryDecodeAsNil() {
				x.TransactionUUID = ""
			} else {
				yyv14 := &x.TransactionUUID
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					*((*string)(yyv14)) = r.DecodeString()
				}
			}
		case "status":
			if x.Status == nil {
				x.Status = new(int64)
			}
			if r.TryDecodeAsNil() {
				if x.Status != nil {
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*((*int64)(x.Status)) = int64(r.DecodeInt(64))
				}
			}
		case "rdr":
			if x.RequestDeliveryResponse == nil {
				x.RequestDeliveryResponse = new(int64)
			}
			if r.TryDecodeAsNil() {
				if x.RequestDeliveryResponse != nil {
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					*((*int64)(x.RequestDeliveryResponse)) = int64(r.DecodeInt(64))
				}
			}
		case "headers":
			if r.TryDecodeAsNil() {
				x.Headers = nil
			} else {
				yyv20 := &x.Headers
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					z.F.DecSliceStringX(yyv20, d)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv22 := &x.Metadata
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					z.F.DecMapStringStringX(yyv22, d)
				}
			}
		case "spans":
			if r.TryDecodeAsNil() {
				x.Spans = nil
			} else {
				yyv24 := &x.Spans
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					h.decSliceSlicestring((*[][]string)(yyv24), d)
				}
			}
		case "include_spans":
			if x.IncludeSpans == nil {
				x.IncludeSpans = new(bool)
			}
			if r.TryDecodeAsNil() {
				if x.IncludeSpans != nil {
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*bool)(x.IncludeSpans)) = r.DecodeBool()
				}
			}
		case "payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv28 := &x.Payload
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*yyv28 = r.DecodeBytes(*(*[]byte)(yyv28), false)
				}
			}
		case "partner_ids":
			if r.TryDecodeAsNil() {
				x.PartnerIDs = nil
			} else {
				yyv30 := &x.PartnerIDs
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					z.F.DecSliceStringX(yyv30, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SimpleRequestResponse) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj32 int
	var yyb32 bool
	var yyhl32 bool = l >= 0
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		yyv33 := &x.Type
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv33) {
		} else {
			*((*int64)(yyv33)) = int64(r.DecodeInt(64))
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		yyv35 := &x.Source
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		yyv37 := &x.Destination
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContentType = ""
	} else {
		yyv39 := &x.ContentType
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Accept = ""
	} else {
		yyv41 := &x.Accept
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionUUID = ""
	} else {
		yyv43 := &x.TransactionUUID
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			*((*string)(yyv43)) = r.DecodeString()
		}
	}
	if x.Status == nil {
		x.Status = new(int64)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.Status != nil {
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			*((*int64)(x.Status)) = int64(r.DecodeInt(64))
		}
	}
	if x.RequestDeliveryResponse == nil {
		x.RequestDeliveryResponse = new(int64)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.RequestDeliveryResponse != nil {
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			*((*int64)(x.RequestDeliveryResponse)) = int64(r.DecodeInt(64))
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headers = nil
	} else {
		yyv49 := &x.Headers
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			z.F.DecSliceStringX(yyv49, d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv51 := &x.Metadata
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			z.F.DecMapStringStringX(yyv51, d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spans = nil
	} else {
		yyv53 := &x.Spans
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			h.decSliceSlicestring((*[][]string)(yyv53), d)
		}
	}
	if x.IncludeSpans == nil {
		x.IncludeSpans = new(bool)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.IncludeSpans != nil {
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*bool)(x.IncludeSpans)) = r.DecodeBool()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv57 := &x.Payload
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			*yyv57 = r.DecodeBytes(*(*[]byte)(yyv57), false)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PartnerIDs = nil
	} else {
		yyv59 := &x.PartnerIDs
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			z.F.DecSliceStringX(yyv59, d)
		}
	}
	for {
		yyj32++
		if yyhl32 {
			yyb32 = yyj32 > l
		} else {
			yyb32 = r.CheckBreak()
		}
		if yyb32 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj32-1, "")
	}
	r.ReadArrayEnd()
}

func (x *SimpleEvent) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [8]bool
			_ = yyq2
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false
			yyq2[3] = x.ContentType != ""
			yyq2[4] = len(x.Headers) != 0
			yyq2[5] = len(x.Metadata) != 0
			yyq2[6] = len(x.Payload) != 0
			yyq2[7] = len(x.PartnerIDs) != 0
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(8)
			} else {
				var yynn2 = 3
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("msg_type"))
				r.WriteMapElemValue()
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Source))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("source"))
				r.WriteMapElemValue()
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Source))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Destination))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("dest"))
				r.WriteMapElemValue()
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Destination))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ContentType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("content_type"))
					r.WriteMapElemValue()
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ContentType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						yym16 := z.EncBinary()
						_ = yym16
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("headers"))
					r.WriteMapElemValue()
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						yym17 := z.EncBinary()
						_ = yym17
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("metadata"))
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym20 := z.EncBinary()
						_ = yym20
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						yym22 := z.EncBinary()
						_ = yym22
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW306, []byte(x.Payload))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("payload"))
					r.WriteMapElemValue()
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						yym23 := z.EncBinary()
						_ = yym23
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW306, []byte(x.Payload))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						yym25 := z.EncBinary()
						_ = yym25
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("partner_ids"))
					r.WriteMapElemValue()
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						yym26 := z.EncBinary()
						_ = yym26
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *SimpleEvent) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap306 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray306 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr306)
		}
	}
}

func (x *SimpleEvent) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				yyv4 := &x.Type
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				yyv6 := &x.Source
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "dest":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				yyv8 := &x.Destination
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "content_type":
			if r.TryDecodeAsNil() {
				x.ContentType = ""
			} else {
				yyv10 := &x.ContentType
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "headers":
			if r.TryDecodeAsNil() {
				x.Headers = nil
			} else {
				yyv12 := &x.Headers
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					z.F.DecSliceStringX(yyv12, d)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv14 := &x.Metadata
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					z.F.DecMapStringStringX(yyv14, d)
				}
			}
		case "payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv16 := &x.Payload
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					*yyv16 = r.DecodeBytes(*(*[]byte)(yyv16), false)
				}
			}
		case "partner_ids":
			if r.TryDecodeAsNil() {
				x.PartnerIDs = nil
			} else {
				yyv18 := &x.PartnerIDs
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					z.F.DecSliceStringX(yyv18, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *SimpleEvent) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj20 int
	var yyb20 bool
	var yyhl20 bool = l >= 0
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		yyv21 := &x.Type
		yym22 := z.DecBinary()
		_ = yym22
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv21) {
		} else {
			*((*int64)(yyv21)) = int64(r.DecodeInt(64))
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		yyv23 := &x.Source
		yym24 := z.DecBinary()
		_ = yym24
		if false {
		} else {
			*((*string)(yyv23)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		yyv25 := &x.Destination
		yym26 := z.DecBinary()
		_ = yym26
		if false {
		} else {
			*((*string)(yyv25)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContentType = ""
	} else {
		yyv27 := &x.ContentType
		yym28 := z.DecBinary()
		_ = yym28
		if false {
		} else {
			*((*string)(yyv27)) = r.DecodeString()
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headers = nil
	} else {
		yyv29 := &x.Headers
		yym30 := z.DecBinary()
		_ = yym30
		if false {
		} else {
			z.F.DecSliceStringX(yyv29, d)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv31 := &x.Metadata
		yym32 := z.DecBinary()
		_ = yym32
		if false {
		} else {
			z.F.DecMapStringStringX(yyv31, d)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv33 := &x.Payload
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else {
			*yyv33 = r.DecodeBytes(*(*[]byte)(yyv33), false)
		}
	}
	yyj20++
	if yyhl20 {
		yyb20 = yyj20 > l
	} else {
		yyb20 = r.CheckBreak()
	}
	if yyb20 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PartnerIDs = nil
	} else {
		yyv35 := &x.PartnerIDs
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			z.F.DecSliceStringX(yyv35, d)
		}
	}
	for {
		yyj20++
		if yyhl20 {
			yyb20 = yyj20 > l
		} else {
			yyb20 = r.CheckBreak()
		}
		if yyb20 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj20-1, "")
	}
	r.ReadArrayEnd()
}

func (x *CRUD) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_ = yyq2
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false
			yyq2[3] = x.TransactionUUID != ""
			yyq2[4] = x.ContentType != ""
			yyq2[5] = len(x.Headers) != 0
			yyq2[6] = len(x.Metadata) != 0
			yyq2[7] = len(x.Spans) != 0
			yyq2[8] = x.IncludeSpans != nil
			yyq2[9] = x.Status != nil
			yyq2[10] = x.RequestDeliveryResponse != nil
			yyq2[12] = len(x.Payload) != 0
			yyq2[13] = len(x.PartnerIDs) != 0
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(14)
			} else {
				var yynn2 = 4
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.WriteMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("msg_type"))
				r.WriteMapElemValue()
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Source))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("source"))
				r.WriteMapElemValue()
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Source))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Destination))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("dest"))
				r.WriteMapElemValue()
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Destination))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.TransactionUUID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[3] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("transaction_uuid"))
					r.WriteMapElemValue()
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.TransactionUUID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ContentType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF8306, "")
				}
			} else {
				if yyq2[4] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("content_type"))
					r.WriteMapElemValue()
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF8306, string(x.ContentType))
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[5] {
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						yym19 := z.EncBinary()
						_ = yym19
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[5] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("headers"))
					r.WriteMapElemValue()
					if x.Headers == nil {
						r.EncodeNil()
					} else {
						yym20 := z.EncBinary()
						_ = yym20
						if false {
						} else {
							z.F.EncSliceStringV(x.Headers, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[6] {
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym22 := z.EncBinary()
						_ = yym22
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[6] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("metadata"))
					r.WriteMapElemValue()
					if x.Metadata == nil {
						r.EncodeNil()
					} else {
						yym23 := z.EncBinary()
						_ = yym23
						if false {
						} else {
							z.F.EncMapStringStringV(x.Metadata, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[7] {
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						yym25 := z.EncBinary()
						_ = yym25
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("spans"))
					r.WriteMapElemValue()
					if x.Spans == nil {
						r.EncodeNil()
					} else {
						yym26 := z.EncBinary()
						_ = yym26
						if false {
						} else {
							h.encSliceSlicestring(([][]string)(x.Spans), e)
						}
					}
				}
			}
			var yyn27 bool
			if x.IncludeSpans == nil {
				yyn27 = true
				goto LABEL27
			}
		LABEL27:
			if yyr2 || yy2arr2 {
				if yyn27 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[8] {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy28 := *x.IncludeSpans
							yym29 := z.EncBinary()
							_ = yym29
							if false {
							} else {
								r.EncodeBool(bool(yy28))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[8] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("include_spans"))
					r.WriteMapElemValue()
					if yyn27 {
						r.EncodeNil()
					} else {
						if x.IncludeSpans == nil {
							r.EncodeNil()
						} else {
							yy30 := *x.IncludeSpans
							yym31 := z.EncBinary()
							_ = yym31
							if false {
							} else {
								r.EncodeBool(bool(yy30))
							}
						}
					}
				}
			}
			var yyn32 bool
			if x.Status == nil {
				yyn32 = true
				goto LABEL32
			}
		LABEL32:
			if yyr2 || yy2arr2 {
				if yyn32 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[9] {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy33 := *x.Status
							yym34 := z.EncBinary()
							_ = yym34
							if false {
							} else {
								r.EncodeInt(int64(yy33))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[9] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("status"))
					r.WriteMapElemValue()
					if yyn32 {
						r.EncodeNil()
					} else {
						if x.Status == nil {
							r.EncodeNil()
						} else {
							yy35 := *x.Status
							yym36 := z.EncBinary()
							_ = yym36
							if false {
							} else {
								r.EncodeInt(int64(yy35))
							}
						}
					}
				}
			}
			var yyn37 bool
			if x.RequestDeliveryResponse == nil {
				yyn37 = true
				goto LABEL37
			}
		LABEL37:
			if yyr2 || yy2arr2 {
				if yyn37 {
					r.WriteArrayElem()
					r.EncodeNil()
				} else {
					r.WriteArrayElem()
					if yyq2[10] {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy38 := *x.RequestDeliveryResponse
							yym39 := z.EncBinary()
							_ = yym39
							if false {
							} else {
								r.EncodeInt(int64(yy38))
							}
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq2[10] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("rdr"))
					r.WriteMapElemValue()
					if yyn37 {
						r.EncodeNil()
					} else {
						if x.RequestDeliveryResponse == nil {
							r.EncodeNil()
						} else {
							yy40 := *x.RequestDeliveryResponse
							yym41 := z.EncBinary()
							_ = yym41
							if false {
							} else {
								r.EncodeInt(int64(yy40))
							}
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym43 := z.EncBinary()
				_ = yym43
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Path))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("path"))
				r.WriteMapElemValue()
				yym44 := z.EncBinary()
				_ = yym44
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.Path))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[12] {
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						yym46 := z.EncBinary()
						_ = yym46
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW306, []byte(x.Payload))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("payload"))
					r.WriteMapElemValue()
					if x.Payload == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							r.EncodeStringBytes(codecSelferC_RAW306, []byte(x.Payload))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				if yyq2[13] {
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						yym49 := z.EncBinary()
						_ = yym49
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					r.WriteMapElemKey()
					r.EncodeString(codecSelferC_UTF8306, string("partner_ids"))
					r.WriteMapElemValue()
					if x.PartnerIDs == nil {
						r.EncodeNil()
					} else {
						yym50 := z.EncBinary()
						_ = yym50
						if false {
						} else {
							z.F.EncSliceStringV(x.PartnerIDs, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *CRUD) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap306 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray306 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr306)
		}
	}
}

func (x *CRUD) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				yyv4 := &x.Type
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = ""
			} else {
				yyv6 := &x.Source
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "dest":
			if r.TryDecodeAsNil() {
				x.Destination = ""
			} else {
				yyv8 := &x.Destination
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		case "transaction_uuid":
			if r.TryDecodeAsNil() {
				x.TransactionUUID = ""
			} else {
				yyv10 := &x.TransactionUUID
				yym11 := z.DecBinary()
				_ = yym11
				if false {
				} else {
					*((*string)(yyv10)) = r.DecodeString()
				}
			}
		case "content_type":
			if r.TryDecodeAsNil() {
				x.ContentType = ""
			} else {
				yyv12 := &x.ContentType
				yym13 := z.DecBinary()
				_ = yym13
				if false {
				} else {
					*((*string)(yyv12)) = r.DecodeString()
				}
			}
		case "headers":
			if r.TryDecodeAsNil() {
				x.Headers = nil
			} else {
				yyv14 := &x.Headers
				yym15 := z.DecBinary()
				_ = yym15
				if false {
				} else {
					z.F.DecSliceStringX(yyv14, d)
				}
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.Metadata = nil
			} else {
				yyv16 := &x.Metadata
				yym17 := z.DecBinary()
				_ = yym17
				if false {
				} else {
					z.F.DecMapStringStringX(yyv16, d)
				}
			}
		case "spans":
			if r.TryDecodeAsNil() {
				x.Spans = nil
			} else {
				yyv18 := &x.Spans
				yym19 := z.DecBinary()
				_ = yym19
				if false {
				} else {
					h.decSliceSlicestring((*[][]string)(yyv18), d)
				}
			}
		case "include_spans":
			if x.IncludeSpans == nil {
				x.IncludeSpans = new(bool)
			}
			if r.TryDecodeAsNil() {
				if x.IncludeSpans != nil {
					x.IncludeSpans = nil
				}
			} else {
				if x.IncludeSpans == nil {
					x.IncludeSpans = new(bool)
				}
				yym21 := z.DecBinary()
				_ = yym21
				if false {
				} else {
					*((*bool)(x.IncludeSpans)) = r.DecodeBool()
				}
			}
		case "status":
			if x.Status == nil {
				x.Status = new(int64)
			}
			if r.TryDecodeAsNil() {
				if x.Status != nil {
					x.Status = nil
				}
			} else {
				if x.Status == nil {
					x.Status = new(int64)
				}
				yym23 := z.DecBinary()
				_ = yym23
				if false {
				} else {
					*((*int64)(x.Status)) = int64(r.DecodeInt(64))
				}
			}
		case "rdr":
			if x.RequestDeliveryResponse == nil {
				x.RequestDeliveryResponse = new(int64)
			}
			if r.TryDecodeAsNil() {
				if x.RequestDeliveryResponse != nil {
					x.RequestDeliveryResponse = nil
				}
			} else {
				if x.RequestDeliveryResponse == nil {
					x.RequestDeliveryResponse = new(int64)
				}
				yym25 := z.DecBinary()
				_ = yym25
				if false {
				} else {
					*((*int64)(x.RequestDeliveryResponse)) = int64(r.DecodeInt(64))
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				yyv26 := &x.Path
				yym27 := z.DecBinary()
				_ = yym27
				if false {
				} else {
					*((*string)(yyv26)) = r.DecodeString()
				}
			}
		case "payload":
			if r.TryDecodeAsNil() {
				x.Payload = nil
			} else {
				yyv28 := &x.Payload
				yym29 := z.DecBinary()
				_ = yym29
				if false {
				} else {
					*yyv28 = r.DecodeBytes(*(*[]byte)(yyv28), false)
				}
			}
		case "partner_ids":
			if r.TryDecodeAsNil() {
				x.PartnerIDs = nil
			} else {
				yyv30 := &x.PartnerIDs
				yym31 := z.DecBinary()
				_ = yym31
				if false {
				} else {
					z.F.DecSliceStringX(yyv30, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *CRUD) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj32 int
	var yyb32 bool
	var yyhl32 bool = l >= 0
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		yyv33 := &x.Type
		yym34 := z.DecBinary()
		_ = yym34
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv33) {
		} else {
			*((*int64)(yyv33)) = int64(r.DecodeInt(64))
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Source = ""
	} else {
		yyv35 := &x.Source
		yym36 := z.DecBinary()
		_ = yym36
		if false {
		} else {
			*((*string)(yyv35)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Destination = ""
	} else {
		yyv37 := &x.Destination
		yym38 := z.DecBinary()
		_ = yym38
		if false {
		} else {
			*((*string)(yyv37)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.TransactionUUID = ""
	} else {
		yyv39 := &x.TransactionUUID
		yym40 := z.DecBinary()
		_ = yym40
		if false {
		} else {
			*((*string)(yyv39)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ContentType = ""
	} else {
		yyv41 := &x.ContentType
		yym42 := z.DecBinary()
		_ = yym42
		if false {
		} else {
			*((*string)(yyv41)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Headers = nil
	} else {
		yyv43 := &x.Headers
		yym44 := z.DecBinary()
		_ = yym44
		if false {
		} else {
			z.F.DecSliceStringX(yyv43, d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Metadata = nil
	} else {
		yyv45 := &x.Metadata
		yym46 := z.DecBinary()
		_ = yym46
		if false {
		} else {
			z.F.DecMapStringStringX(yyv45, d)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Spans = nil
	} else {
		yyv47 := &x.Spans
		yym48 := z.DecBinary()
		_ = yym48
		if false {
		} else {
			h.decSliceSlicestring((*[][]string)(yyv47), d)
		}
	}
	if x.IncludeSpans == nil {
		x.IncludeSpans = new(bool)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.IncludeSpans != nil {
			x.IncludeSpans = nil
		}
	} else {
		if x.IncludeSpans == nil {
			x.IncludeSpans = new(bool)
		}
		yym50 := z.DecBinary()
		_ = yym50
		if false {
		} else {
			*((*bool)(x.IncludeSpans)) = r.DecodeBool()
		}
	}
	if x.Status == nil {
		x.Status = new(int64)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.Status != nil {
			x.Status = nil
		}
	} else {
		if x.Status == nil {
			x.Status = new(int64)
		}
		yym52 := z.DecBinary()
		_ = yym52
		if false {
		} else {
			*((*int64)(x.Status)) = int64(r.DecodeInt(64))
		}
	}
	if x.RequestDeliveryResponse == nil {
		x.RequestDeliveryResponse = new(int64)
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		if x.RequestDeliveryResponse != nil {
			x.RequestDeliveryResponse = nil
		}
	} else {
		if x.RequestDeliveryResponse == nil {
			x.RequestDeliveryResponse = new(int64)
		}
		yym54 := z.DecBinary()
		_ = yym54
		if false {
		} else {
			*((*int64)(x.RequestDeliveryResponse)) = int64(r.DecodeInt(64))
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		yyv55 := &x.Path
		yym56 := z.DecBinary()
		_ = yym56
		if false {
		} else {
			*((*string)(yyv55)) = r.DecodeString()
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Payload = nil
	} else {
		yyv57 := &x.Payload
		yym58 := z.DecBinary()
		_ = yym58
		if false {
		} else {
			*yyv57 = r.DecodeBytes(*(*[]byte)(yyv57), false)
		}
	}
	yyj32++
	if yyhl32 {
		yyb32 = yyj32 > l
	} else {
		yyb32 = r.CheckBreak()
	}
	if yyb32 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.PartnerIDs = nil
	} else {
		yyv59 := &x.PartnerIDs
		yym60 := z.DecBinary()
		_ = yym60
		if false {
		} else {
			z.F.DecSliceStringX(yyv59, d)
		}
	}
	for {
		yyj32++
		if yyhl32 {
			yyb32 = yyj32 > l
		} else {
			yyb32 = r.CheckBreak()
		}
		if yyb32 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj32-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceRegistration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(3)
			} else {
				r.WriteMapStart(3)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("msg_type"))
				r.WriteMapElemValue()
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym7 := z.EncBinary()
				_ = yym7
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.ServiceName))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("service_name"))
				r.WriteMapElemValue()
				yym8 := z.EncBinary()
				_ = yym8
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.ServiceName))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym10 := z.EncBinary()
				_ = yym10
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.URL))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("url"))
				r.WriteMapElemValue()
				yym11 := z.EncBinary()
				_ = yym11
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF8306, string(x.URL))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ServiceRegistration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap306 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray306 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr306)
		}
	}
}

func (x *ServiceRegistration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				yyv4 := &x.Type
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		case "service_name":
			if r.TryDecodeAsNil() {
				x.ServiceName = ""
			} else {
				yyv6 := &x.ServiceName
				yym7 := z.DecBinary()
				_ = yym7
				if false {
				} else {
					*((*string)(yyv6)) = r.DecodeString()
				}
			}
		case "url":
			if r.TryDecodeAsNil() {
				x.URL = ""
			} else {
				yyv8 := &x.URL
				yym9 := z.DecBinary()
				_ = yym9
				if false {
				} else {
					*((*string)(yyv8)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ServiceRegistration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj10 int
	var yyb10 bool
	var yyhl10 bool = l >= 0
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		yyv11 := &x.Type
		yym12 := z.DecBinary()
		_ = yym12
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv11) {
		} else {
			*((*int64)(yyv11)) = int64(r.DecodeInt(64))
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.ServiceName = ""
	} else {
		yyv13 := &x.ServiceName
		yym14 := z.DecBinary()
		_ = yym14
		if false {
		} else {
			*((*string)(yyv13)) = r.DecodeString()
		}
	}
	yyj10++
	if yyhl10 {
		yyb10 = yyj10 > l
	} else {
		yyb10 = r.CheckBreak()
	}
	if yyb10 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.URL = ""
	} else {
		yyv15 := &x.URL
		yym16 := z.DecBinary()
		_ = yym16
		if false {
		} else {
			*((*string)(yyv15)) = r.DecodeString()
		}
	}
	for {
		yyj10++
		if yyhl10 {
			yyb10 = yyj10 > l
		} else {
			yyb10 = r.CheckBreak()
		}
		if yyb10 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj10-1, "")
	}
	r.ReadArrayEnd()
}

func (x *ServiceAlive) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			_, _ = yysep2, yy2arr2
			const yyr2 bool = false
			if yyr2 || yy2arr2 {
				r.WriteArrayStart(1)
			} else {
				r.WriteMapStart(1)
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayElem()
				yym4 := z.EncBinary()
				_ = yym4
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			} else {
				r.WriteMapElemKey()
				r.EncodeString(codecSelferC_UTF8306, string("msg_type"))
				r.WriteMapElemValue()
				yym5 := z.EncBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.EncExt(x.Type) {
				} else {
					r.EncodeInt(int64(x.Type))
				}
			}
			if yyr2 || yy2arr2 {
				r.WriteArrayEnd()
			} else {
				r.WriteMapEnd()
			}
		}
	}
}

func (x *ServiceAlive) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1 := z.DecBinary()
	_ = yym1
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2 := r.ContainerType()
		if yyct2 == codecSelferValueTypeMap306 {
			yyl2 := r.ReadMapStart()
			if yyl2 == 0 {
				r.ReadMapEnd()
			} else {
				x.codecDecodeSelfFromMap(yyl2, d)
			}
		} else if yyct2 == codecSelferValueTypeArray306 {
			yyl2 := r.ReadArrayStart()
			if yyl2 == 0 {
				r.ReadArrayEnd()
			} else {
				x.codecDecodeSelfFromArray(yyl2, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr306)
		}
	}
}

func (x *ServiceAlive) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3Slc
	var yyhl3 bool = l >= 0
	for yyj3 := 0; ; yyj3++ {
		if yyhl3 {
			if yyj3 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		r.ReadMapElemKey()
		yys3Slc = r.DecodeStringAsBytes()
		yys3 := string(yys3Slc)
		r.ReadMapElemValue()
		switch yys3 {
		case "msg_type":
			if r.TryDecodeAsNil() {
				x.Type = 0
			} else {
				yyv4 := &x.Type
				yym5 := z.DecBinary()
				_ = yym5
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4) {
				} else {
					*((*int64)(yyv4)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3)
		} // end switch yys3
	} // end for yyj3
	r.ReadMapEnd()
}

func (x *ServiceAlive) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj6 int
	var yyb6 bool
	var yyhl6 bool = l >= 0
	yyj6++
	if yyhl6 {
		yyb6 = yyj6 > l
	} else {
		yyb6 = r.CheckBreak()
	}
	if yyb6 {
		r.ReadArrayEnd()
		return
	}
	r.ReadArrayElem()
	if r.TryDecodeAsNil() {
		x.Type = 0
	} else {
		yyv7 := &x.Type
		yym8 := z.DecBinary()
		_ = yym8
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv7) {
		} else {
			*((*int64)(yyv7)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj6++
		if yyhl6 {
			yyb6 = yyj6 > l
		} else {
			yyb6 = r.CheckBreak()
		}
		if yyb6 {
			break
		}
		r.ReadArrayElem()
		z.DecStructFieldNotFound(yyj6-1, "")
	}
	r.ReadArrayEnd()
}

func (x codecSelfer306) encSliceSlicestring(v [][]string, e *codec1978.Encoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		if yyv1 == nil {
			r.EncodeNil()
		} else {
			yym2 := z.EncBinary()
			_ = yym2
			if false {
			} else {
				z.F.EncSliceStringV(yyv1, e)
			}
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer306) decSliceSlicestring(v *[][]string, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = [][]string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([][]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 24)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([][]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			// yydn1 = r.TryDecodeAsNil()

			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, nil)
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = nil
				} else {
					yyv2 := &yyv1[yyj1]
					yym3 := z.DecBinary()
					_ = yym3
					if false {
					} else {
						z.F.DecSliceStringX(yyv2, d)
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([][]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}

func (x codecSelfer306) encSlicestring(v []string, e *codec1978.Encoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.WriteArrayStart(len(v))
	for _, yyv1 := range v {
		r.WriteArrayElem()
		yym2 := z.EncBinary()
		_ = yym2
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF8306, string(yyv1))
		}
	}
	r.WriteArrayEnd()
}

func (x codecSelfer306) decSlicestring(v *[]string, d *codec1978.Decoder) {
	var h codecSelfer306
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv1 := *v
	yyh1, yyl1 := z.DecSliceHelperStart()
	var yyc1 bool
	_ = yyc1
	if yyl1 == 0 {
		if yyv1 == nil {
			yyv1 = []string{}
			yyc1 = true
		} else if len(yyv1) != 0 {
			yyv1 = yyv1[:0]
			yyc1 = true
		}
	} else {
		yyhl1 := yyl1 > 0
		var yyrl1 int
		_ = yyrl1
		if yyhl1 {
			if yyl1 > cap(yyv1) {
				yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				if yyrl1 <= cap(yyv1) {
					yyv1 = yyv1[:yyrl1]
				} else {
					yyv1 = make([]string, yyrl1)
				}
				yyc1 = true
			} else if yyl1 != len(yyv1) {
				yyv1 = yyv1[:yyl1]
				yyc1 = true
			}
		}
		var yyj1 int
		// var yydn1 bool
		for ; (yyhl1 && yyj1 < yyl1) || !(yyhl1 || r.CheckBreak()); yyj1++ {
			if yyj1 == 0 && len(yyv1) == 0 {
				if yyhl1 {
					yyrl1 = z.DecInferLen(yyl1, z.DecBasicHandle().MaxInitLen, 16)
				} else {
					yyrl1 = 8
				}
				yyv1 = make([]string, yyrl1)
				yyc1 = true
			}
			yyh1.ElemContainerState(yyj1)
			// yydn1 = r.TryDecodeAsNil()

			// if indefinite, etc, then expand the slice if necessary
			var yydb1 bool
			if yyj1 >= len(yyv1) {
				yyv1 = append(yyv1, "")
				yyc1 = true

			}
			if yydb1 {
				z.DecSwallow()
			} else {
				if r.TryDecodeAsNil() {
					yyv1[yyj1] = ""
				} else {
					yyv2 := &yyv1[yyj1]
					yym3 := z.DecBinary()
					_ = yym3
					if false {
					} else {
						*((*string)(yyv2)) = r.DecodeString()
					}
				}

			}

		}
		if yyj1 < len(yyv1) {
			yyv1 = yyv1[:yyj1]
			yyc1 = true
		} else if yyj1 == 0 && yyv1 == nil {
			yyv1 = make([]string, 0)
			yyc1 = true
		}
	}
	yyh1.End()
	if yyc1 {
		*v = yyv1
	}

}
